//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace RevolutionDAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Phrase))]
    public partial class Topic
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Name
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Description
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<Phrase> Phrases
        {
            get
            {
                if (_phrases == null)
                {
                    var newCollection = new FixupCollection<Phrase>();
                    newCollection.CollectionChanged += FixupPhrases;
                    _phrases = newCollection;
                }
                return _phrases;
            }
            set
            {
                if (!ReferenceEquals(_phrases, value))
                {
                    var previousValue = _phrases as FixupCollection<Phrase>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPhrases;
                    }
                    _phrases = value;
                    var newValue = value as FixupCollection<Phrase>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPhrases;
                    }
                }
            }
        }
        private ICollection<Phrase> _phrases;

        #endregion
        #region Association Fixup
    
        private void FixupPhrases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Phrase item in e.NewItems)
                {
                    item.Topic = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Phrase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Topic, this))
                    {
                        item.Topic = null;
                    }
                }
            }
        }

        #endregion
    }
}
