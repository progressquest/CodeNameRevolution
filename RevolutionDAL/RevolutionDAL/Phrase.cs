//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace RevolutionDAL
{
    [DataContract]
    public partial class Phrase
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int Immediacy
        {
            get;
            set;
        }
    
        public virtual string Text
        {
            get;
            set;
        }
    
        public virtual bool IsQuestion
        {
            get;
            set;
        }
    
        public virtual bool IsSpontaneous
        {
            get;
            set;
        }
    
        public virtual int TopicID
        {
            get { return _topicID; }
            set
            {
                if (_topicID != value)
                {
                    if (Topic != null && Topic.ID != value)
                    {
                        Topic = null;
                    }
                    _topicID = value;
                }
            }
        }
        private int _topicID;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<PersonalityPhrase> PersonalityPhrases
        {
            get
            {
                if (_personalityPhrases == null)
                {
                    var newCollection = new FixupCollection<PersonalityPhrase>();
                    newCollection.CollectionChanged += FixupPersonalityPhrases;
                    _personalityPhrases = newCollection;
                }
                return _personalityPhrases;
            }
            set
            {
                if (!ReferenceEquals(_personalityPhrases, value))
                {
                    var previousValue = _personalityPhrases as FixupCollection<PersonalityPhrase>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPersonalityPhrases;
                    }
                    _personalityPhrases = value;
                    var newValue = value as FixupCollection<PersonalityPhrase>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPersonalityPhrases;
                    }
                }
            }
        }
        private ICollection<PersonalityPhrase> _personalityPhrases;
    
        public virtual Topic Topic
        {
            get { return _topic; }
            set
            {
                if (!ReferenceEquals(_topic, value))
                {
                    var previousValue = _topic;
                    _topic = value;
                    FixupTopic(previousValue);
                }
            }
        }
        private Topic _topic;

        #endregion
        #region Association Fixup
    
        private void FixupTopic(Topic previousValue)
        {
            if (previousValue != null && previousValue.Phrases.Contains(this))
            {
                previousValue.Phrases.Remove(this);
            }
    
            if (Topic != null)
            {
                if (!Topic.Phrases.Contains(this))
                {
                    Topic.Phrases.Add(this);
                }
                if (TopicID != Topic.ID)
                {
                    TopicID = Topic.ID;
                }
            }
        }
    
        private void FixupPersonalityPhrases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PersonalityPhrase item in e.NewItems)
                {
                    item.Phrase = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonalityPhrase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Phrase, this))
                    {
                        item.Phrase = null;
                    }
                }
            }
        }

        #endregion
    }
}
