//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace RevolutionDAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CharacterPersonality))]
    public partial class Character
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ID
        {
            get;
            set;
        }
        [DataMember]
        public virtual string FirstName
        {
            get;
            set;
        }
        [DataMember]
        public virtual string LastName
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool Gender
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool Deleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<CharacterPersonality> CharacterPersonalities
        {
            get
            {
                if (_characterPersonalities == null)
                {
                    var newCollection = new FixupCollection<CharacterPersonality>();
                    newCollection.CollectionChanged += FixupCharacterPersonalities;
                    _characterPersonalities = newCollection;
                }
                return _characterPersonalities;
            }
            set
            {
                if (!ReferenceEquals(_characterPersonalities, value))
                {
                    var previousValue = _characterPersonalities as FixupCollection<CharacterPersonality>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCharacterPersonalities;
                    }
                    _characterPersonalities = value;
                    var newValue = value as FixupCollection<CharacterPersonality>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCharacterPersonalities;
                    }
                }
            }
        }
        private ICollection<CharacterPersonality> _characterPersonalities;

        #endregion
        #region Association Fixup
    
        private void FixupCharacterPersonalities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CharacterPersonality item in e.NewItems)
                {
                    item.Character = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CharacterPersonality item in e.OldItems)
                {
                    if (ReferenceEquals(item.Character, this))
                    {
                        item.Character = null;
                    }
                }
            }
        }

        #endregion
    }
}
