//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace RevolutionDAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PersonalityType))]
    [KnownType(typeof(PersonalityTypeType))]
    public partial class PersonalityTypeType
    {
        #region Primitive Properties
        [DataMember]
        public virtual int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (PersonalityTypeType2 != null && PersonalityTypeType2.ID != value)
                    {
                        PersonalityTypeType2 = null;
                    }
                    _iD = value;
                }
            }
        }
        private int _iD;
        [DataMember]
        public virtual string Name
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Description
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<PersonalityType> PersonalityTypes
        {
            get
            {
                if (_personalityTypes == null)
                {
                    var newCollection = new FixupCollection<PersonalityType>();
                    newCollection.CollectionChanged += FixupPersonalityTypes;
                    _personalityTypes = newCollection;
                }
                return _personalityTypes;
            }
            set
            {
                if (!ReferenceEquals(_personalityTypes, value))
                {
                    var previousValue = _personalityTypes as FixupCollection<PersonalityType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPersonalityTypes;
                    }
                    _personalityTypes = value;
                    var newValue = value as FixupCollection<PersonalityType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPersonalityTypes;
                    }
                }
            }
        }
        private ICollection<PersonalityType> _personalityTypes;
        
    
        [DataMember]
        public virtual PersonalityTypeType PersonalityTypeType1
        {
            get { return _personalityTypeType1; }
            set
            {
                if (!ReferenceEquals(_personalityTypeType1, value))
                {
                    var previousValue = _personalityTypeType1;
                    _personalityTypeType1 = value;
                    FixupPersonalityTypeType1(previousValue);
                }
            }
        }
        private PersonalityTypeType _personalityTypeType1;
        
    
        [DataMember]
        public virtual PersonalityTypeType PersonalityTypeType2
        {
            get { return _personalityTypeType2; }
            set
            {
                if (!ReferenceEquals(_personalityTypeType2, value))
                {
                    var previousValue = _personalityTypeType2;
                    _personalityTypeType2 = value;
                    FixupPersonalityTypeType2(previousValue);
                }
            }
        }
        private PersonalityTypeType _personalityTypeType2;

        #endregion
        #region Association Fixup
    
        private void FixupPersonalityTypeType1(PersonalityTypeType previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.PersonalityTypeType2, this))
            {
                previousValue.PersonalityTypeType2 = null;
            }
    
            if (PersonalityTypeType1 != null)
            {
                PersonalityTypeType1.PersonalityTypeType2 = this;
            }
        }
    
        private void FixupPersonalityTypeType2(PersonalityTypeType previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.PersonalityTypeType1, this))
            {
                previousValue.PersonalityTypeType1 = null;
            }
    
            if (PersonalityTypeType2 != null)
            {
                PersonalityTypeType2.PersonalityTypeType1 = this;
                if (ID != PersonalityTypeType2.ID)
                {
                    ID = PersonalityTypeType2.ID;
                }
            }
        }
    
        private void FixupPersonalityTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PersonalityType item in e.NewItems)
                {
                    item.PersonalityTypeType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonalityType item in e.OldItems)
                {
                    if (ReferenceEquals(item.PersonalityTypeType, this))
                    {
                        item.PersonalityTypeType = null;
                    }
                }
            }
        }

        #endregion
    }
}
