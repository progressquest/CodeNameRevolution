//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace RevolutionDAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PersonalityType))]
    [KnownType(typeof(Phrase))]
    public partial class PersonalityPhrase
    {
        #region Primitive Properties
        [DataMember]
        public virtual int PhraseID
        {
            get { return _phraseID; }
            set
            {
                if (_phraseID != value)
                {
                    if (Phrase != null && Phrase.ID != value)
                    {
                        Phrase = null;
                    }
                    _phraseID = value;
                }
            }
        }
        private int _phraseID;
        [DataMember]
        public virtual int PersonalityTypeID
        {
            get { return _personalityTypeID; }
            set
            {
                if (_personalityTypeID != value)
                {
                    if (PersonalityType != null && PersonalityType.ID != value)
                    {
                        PersonalityType = null;
                    }
                    _personalityTypeID = value;
                }
            }
        }
        private int _personalityTypeID;
        [DataMember]
        public virtual int PersonalityRating
        {
            get;
            set;
        }
        [DataMember]
        public virtual bool RatingIsGreater
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual PersonalityType PersonalityType
        {
            get { return _personalityType; }
            set
            {
                if (!ReferenceEquals(_personalityType, value))
                {
                    var previousValue = _personalityType;
                    _personalityType = value;
                    FixupPersonalityType(previousValue);
                }
            }
        }
        private PersonalityType _personalityType;
        
    
        [DataMember]
        public virtual Phrase Phrase
        {
            get { return _phrase; }
            set
            {
                if (!ReferenceEquals(_phrase, value))
                {
                    var previousValue = _phrase;
                    _phrase = value;
                    FixupPhrase(previousValue);
                }
            }
        }
        private Phrase _phrase;

        #endregion
        #region Association Fixup
    
        private void FixupPersonalityType(PersonalityType previousValue)
        {
            if (previousValue != null && previousValue.PersonalityPhrases.Contains(this))
            {
                previousValue.PersonalityPhrases.Remove(this);
            }
    
            if (PersonalityType != null)
            {
                if (!PersonalityType.PersonalityPhrases.Contains(this))
                {
                    PersonalityType.PersonalityPhrases.Add(this);
                }
                if (PersonalityTypeID != PersonalityType.ID)
                {
                    PersonalityTypeID = PersonalityType.ID;
                }
            }
        }
    
        private void FixupPhrase(Phrase previousValue)
        {
            if (previousValue != null && previousValue.PersonalityPhrases.Contains(this))
            {
                previousValue.PersonalityPhrases.Remove(this);
            }
    
            if (Phrase != null)
            {
                if (!Phrase.PersonalityPhrases.Contains(this))
                {
                    Phrase.PersonalityPhrases.Add(this);
                }
                if (PhraseID != Phrase.ID)
                {
                    PhraseID = Phrase.ID;
                }
            }
        }

        #endregion
    }
}
